{"mappings":"kBACMA,EAAgBC,SAASC,cAAc,mBACvCC,EAAiBF,SAASC,cAAc,oBACxCE,EAAOH,SAASC,cAAc,QAC9BG,EAAaJ,SAASC,cAAc,UAG1C,MAAAI,EACGC,YAAYC,EAAOC,GAChBC,KAAKF,MAAQA,EACbE,KAAKD,KAAOA,EACZC,KAAKC,GAAKC,KAAKC,UAMrB,SAAAC,QACOC,SAEDA,EAD2C,OAA1CC,aAAaC,QAAQ,iBACtBF,GAEQG,KAAKC,MAAMH,aAAaC,QAAQ,kBAGpCF,EAyBV,SAAAK,EAAuBC,SACdC,EAAYrB,SAASsB,cAAc,OACzCD,EAAUE,UAAUC,IAAI,QACxBH,EAAUI,UAAAA,qBACKL,EAAKV,yCACMU,EAAKb,wCACPa,EAAKZ,6LAM7BT,EAAc2B,YAAYL,GAa7B,SAAAM,EAA0BC,EAASC,SAC1BC,EAAW9B,SAASsB,cAAc,OACxCQ,EAASC,UAAAA,WAAuBF,IAChCC,EAASJ,YAAY1B,SAASgC,eAAeJ,IAC7CzB,EAAK8B,sBAAsB,cAAeH,GAC1C1B,EAAW8B,QACXC,YAAW,IAAML,EAASM,UAAU,KActBpC,SAASC,cAAc,eAAeoC,iBAAiB,SAAS,KAC9EnC,EAAeqB,UAAUa,OAAO,aAInCrC,EAAcsC,iBAAiB,SAAUC,OACnCA,EAAEC,OAAOhB,UAAUiB,SAAS,cAAA,OACtBC,EAAcH,EAAEC,OAAOG,QAAQ,UAjB3C,SAA2BnC,EAAOC,SACzBmC,EAAa3C,SAASC,cAAc,iBACpC2C,EAAY5C,SAASC,cAAc,gBACzC0C,EAAWE,YAActC,EACzBqC,EAAUC,YAAcrC,EACxBN,EAAeqB,UAAUC,IAAI,UAe1BsB,CAFqBL,EAAYxC,cAAc,gBAAgB4C,YAC3CJ,EAAYxC,cAAc,eAAe4C,gBAG7DP,EAAEC,OAAOhB,UAAUiB,SAAS,gBAAA,OACtBC,EAAcH,EAAEC,OAAOG,QAAQ,SACrCf,EAAiB,qCAAsC,kBACvDc,EAAYL,eACN1B,EAAK+B,EAAYxC,cAAc,QAAQ4C,aA1EnD,SAAoBnC,SACXI,EAAQD,IACdC,EAAMiC,SAAQ,CAAC3B,EAAM4B,KACd5B,EAAKV,KAAOA,GACbI,EAAMmC,OAAOD,EAAO,GAEvBjC,aAAamC,QAAQ,gBAAiBjC,KAAKkC,UAAUrC,OAqErDsC,CAAWC,OAAO3C,QAMxBV,SAASqC,iBAAiB,oBAnD1B,WACiBxB,IACRkC,SAAQ3B,IACXD,EAAcC,SAmDpBjB,EAAKkC,iBAAiB,UAAWC,IAC9BA,EAAEgB,uBACIC,EAAYvD,SAASC,cAAc,YAGtCG,EAAWoD,MAAMC,OAAS,GAAKF,EAAUC,MAAMC,OAAS,EAAA,OAClDC,EAAAA,IAAcrD,EAAKD,EAAWoD,MAAOD,EAAUC,OACrDrC,EAAcuC,GAlGpB,SAA+BtC,SACtBN,EAAQD,IACdC,EAAM6C,KAAKvC,GACXL,aAAamC,QAAQ,gBAAiBjC,KAAKkC,UAAUrC,IAgGlD8C,CAAsBF,GACtBtD,EAAWoD,MAAQ,GACnBD,EAAUC,MAAQ,GAClB7B,EAAiB,2BAA4B,mBAC7CvB,EAAW8B,aAEXP,EAAiB,sCAAuC","sources":["./src/note.js"],"sourcesContent":["// Global Query Selectors.\r\nconst noteContainer = document.querySelector('.note-container');\r\nconst modalContainer = document.querySelector('.modal-container');\r\nconst form = document.querySelector('form');\r\nconst titleInput = document.querySelector('#title');\r\n\r\n// Classes for creating a new note.\r\nclass Note {\r\n   constructor(title, body) {\r\n      this.title = title;\r\n      this.body = body;\r\n      this.id = Math.random();\r\n   }\r\n}\r\n\r\n/* --- LOCAL STORAGE --- */\r\n// Function: Retrieve notes from storage.\r\nfunction getNotes() {\r\n   let notes;\r\n   if (localStorage.getItem('noteApp.notes') === null) {\r\n      notes = [];\r\n   } else {\r\n      notes = JSON.parse(localStorage.getItem('noteApp.notes'));\r\n   }\r\n   //console.log(notes);\r\n   return notes;\r\n}\r\n//getNotes();\r\n\r\n// Function: Add notes to localStorage.\r\nfunction addNoteToLocalStorage(note) {\r\n   const notes = getNotes();\r\n   notes.push(note);\r\n   localStorage.setItem('noteApp.notes', JSON.stringify(notes));\r\n}\r\n\r\n// Function: Remove notes from localStorage.\r\nfunction removeNote(id) {\r\n   const notes = getNotes();\r\n   notes.forEach((note, index) => {\r\n      if (note.id === id) {\r\n         notes.splice(index, 1);\r\n      }\r\n      localStorage.setItem('noteApp.notes', JSON.stringify(notes));\r\n   })\r\n}\r\n\r\n\r\n/* --- UI UPDATES --- */\r\n// Function: Create a new note in UI.\r\nfunction addNoteToList(note) {\r\n   const newUINote = document.createElement('div');\r\n   newUINote.classList.add('note');\r\n   newUINote.innerHTML = `\r\n   <span hidden>${note.id}</span>\r\n   <h2 class=\"note__title\">${note.title}</h2>\r\n   <p class=\"note__body\">${note.body}</p>\r\n   <div class=\"note__btns\">\r\n      <button class=\"note__btn note__view\">View Details</button>\r\n      <button class=\"note__btn note__delete\">Delete Note</button>\r\n   </div>\r\n   `;\r\n   noteContainer.appendChild(newUINote);\r\n}\r\n\r\n\r\n// Function: Show notes in UI.\r\nfunction displayNotes() {\r\n   const notes = getNotes();\r\n   notes.forEach(note => {\r\n      addNoteToList(note);\r\n   });\r\n}\r\n\r\n// Function Show alert message.\r\nfunction showAlertMessage(message, alertClass) {\r\n   const alertDiv = document.createElement('div');\r\n   alertDiv.className = `message ${alertClass}`;\r\n   alertDiv.appendChild(document.createTextNode(message));\r\n   form.insertAdjacentElement('beforebegin', alertDiv);\r\n   titleInput.focus();\r\n   setTimeout(() => alertDiv.remove(), 3000);\r\n}\r\n\r\n// Function: View Note in modal.\r\nfunction activateNoteModal(title, body) {\r\n   const modalTitle = document.querySelector('.modal__title');\r\n   const modalBody = document.querySelector('.modal__body');\r\n   modalTitle.textContent = title;\r\n   modalBody.textContent = body;\r\n   modalContainer.classList.add('active');\r\n}\r\n\r\n\r\n// Event: Close modal.\r\nconst modalBtn = document.querySelector('.modal__btn').addEventListener('click', () => {\r\n   modalContainer.classList.remove('active');\r\n})\r\n\r\n// Event: Note buttons operation.\r\nnoteContainer.addEventListener('click', (e) => {\r\n   if(e.target.classList.contains('note__view')) {\r\n      const currentNote = e.target.closest('.note');\r\n      const currentTitle = currentNote.querySelector('.note__title').textContent;\r\n      const currentBody = currentNote.querySelector('.note__body').textContent;\r\n      activateNoteModal(currentTitle, currentBody);\r\n   }\r\n   if(e.target.classList.contains('note__delete')) {\r\n      const currentNote = e.target.closest('.note');\r\n      showAlertMessage('Your note was permanently deleted.', 'remove-message');\r\n      currentNote.remove();\r\n      const id = currentNote.querySelector('span').textContent;\r\n      removeNote(Number(id));\r\n   }\r\n})\r\n\r\n\r\n// Event: Display notes.\r\ndocument.addEventListener('DOMContentLoaded', displayNotes);\r\n\r\n// Event: Note form submit.\r\nform.addEventListener('submit', (e) => {\r\n   e.preventDefault();\r\n   const noteInput = document.querySelector('#note');\r\n\r\n   // validate inputs.\r\n   if(titleInput.value.length > 0 && noteInput.value.length > 0) {\r\n      const newNote = new Note(titleInput.value, noteInput.value);\r\n      addNoteToList(newNote);\r\n      addNoteToLocalStorage(newNote);\r\n      titleInput.value = \"\";\r\n      noteInput.value = \"\";\r\n      showAlertMessage('Note successfully added!', 'success-message');\r\n      titleInput.focus();\r\n   } else {\r\n      showAlertMessage('Please add both a title and a note.', 'alert-message');\r\n   }\r\n})"],"names":["$f28fff5d46ab869156aef21a5288126c$var$noteContainer","document","querySelector","$f28fff5d46ab869156aef21a5288126c$var$modalContainer","$f28fff5d46ab869156aef21a5288126c$var$form","$f28fff5d46ab869156aef21a5288126c$var$titleInput","$f28fff5d46ab869156aef21a5288126c$var$Note","constructor","title","body","this","id","Math","random","$f28fff5d46ab869156aef21a5288126c$var$getNotes","notes","localStorage","getItem","JSON","parse","$f28fff5d46ab869156aef21a5288126c$var$addNoteToList","note","newUINote","createElement","classList","add","innerHTML","appendChild","$f28fff5d46ab869156aef21a5288126c$var$showAlertMessage","message","alertClass","alertDiv","className","createTextNode","insertAdjacentElement","focus","setTimeout","remove","addEventListener","e","target","contains","currentNote","closest","modalTitle","modalBody","textContent","$f28fff5d46ab869156aef21a5288126c$var$activateNoteModal","forEach","index","splice","setItem","stringify","$f28fff5d46ab869156aef21a5288126c$var$removeNote","Number","preventDefault","noteInput","value","length","newNote","push","$f28fff5d46ab869156aef21a5288126c$var$addNoteToLocalStorage"],"version":3,"file":"index.HASH_REF_43e3eebc868c92750d7634f7bbc22abe.js.map"}